% Programa 1
function [x, iter, error] = newtonEjer1JQ(f, x0, niter)
    fp = diff(f);

    iter = zeros(niter,1);
        
    x = x0 - (f(x0)/fp(x0));
    
    for i = 1:niter
        iter(i) = x;
        
        if f(x) == 0
            return
        else
            x = x - (f(x)/fp(x));
        end
    end
    
    error = abs(vpa(f(x)));
    x = vpa(x);
    
    
end

% Programa 2
function [x, niter, iter] = newtonEjer2JQ(f, x0, tol)
    fp = diff(f);
    
    x = x0 - (f(x0)/fp(x0));
    
    n = 1;
    
    while abs(f(x)) > tol
        iter(n) = vpa(x);
        
        if f(x) == 0
            return
        else
            x = x - (f(x)/fp(x));
        end
        n = n + 1;
    end
    
    iter = iter';
    niter = n;
    x = vpa(x);
    
    
end

% Programa 3
function x = ejer3JQ(R, niter)
    x0 = 1;

    x = (1/2)*(x0 + (R/x0));
    
    for i = 1:niter
        x = (1/2)*(x + (R/x));
    end
    
    x = vpa(x);
end 

% Programa 4
function [x, iter] = secanteEjer4JQ(f, x0, x1, niter, tol)
    iter = zeros(niter,1);
   
    x = x1 - ((x1-x0)/(f(x1)-f(x0)))*f(x1);
    
    xant = x1;
    
    iter(1) = x;
    
    i = 2;
    
    while i <= niter
        if(abs(f(x)) <= tol)
            disp('Se detiene el loop porque se alcanzo la tolerancia')
            x = vpa(x);
            return
        else
            aux = xant;
            xant = x;
            x = x - ((x-aux)/(f(x)-f(aux)))*f(x);
            iter(i) = x;
        end
        i = i + 1;
    end
    
    disp('Se detiene el loop porque se alcanzo el maximo de iteraciones')
    x = vpa(x);
            
end

% Desarrollo cada programa
% Programa 1
% f(x) = x2 􀀀 6 y x0 = 1 con 5 iteraciones. En un comentario responda: ¿podriamos comenzar en x0 = 0? >Por que?
clearvars
syms x
f(x) = x^2 - 6;
x0=1;
niter = 5;
[aprox, iter, error] = newtonEjer1JQ(f, x0, niter)
 
aprox =
 
2.4494897427831780981972879791939
 

iter =

    3.5000
    2.6071
    2.4543
    2.4495
    2.4495

 
error =
 
0.000000000000000000000019128006439496832715206951870607

% La funcion tiene un vertice en x=0 y por lo tanto la derivada se anula en tal punto al ser un extremo local de la funcion
% esto provoca que no se pueda calcular el cociente f(x)/f'(x)
% f(x) = -x^3 cos(x) con x0 = -1 con 6 iteraciones. En un comentario responda: ¿Podre hacer 7, 8, 9 o hasta 10 iteraciones? Por que?
f(x) = -x^3 - cos(x) 
 
f(x) =
 
- cos(x) - x^3
 
x0 = -1

x0 =

    -1

niter = 6;
[aprox, iter, error] = newtonEjer1JQ(f, x0, niter)
 
aprox =
 
-0.86547403310161444662068590118623
 

iter =

   -0.8803
   -0.8657
   -0.8655
   -0.8655
   -0.8655
   -0.8655

 
error =
 
0.0
 
% Para una mayor cantidad de iteraciones como la funcion en x f(x) = 0, el valor de x no cambia debido a que f(x)/f'(x) = 0 para x > 6
% f(x) = exp(x) + 2^-x + 2*cos(x) - 6 con x0 = 1.5 con 5 iteraciones.
f(x) = exp(x) + 2^(-x) + 2*cos(x) - 6
 
f(x) =
 
2*cos(x) + exp(x) + 1/2^x - 6
 
x0=1.5;
niter = 5;
[aprox, iter, error] = newtonEjer1JQ(f, x0, niter)
 
aprox =
 
1.8293836019338488171362129468142
 

iter =

    1.9565
    1.8415
    1.8295
    1.8294
    1.8294

 
error =
 
0.000000000000000000000000000000060139682479506014790518119236166
 
% Programa 2
% f(x) = x3 - 2x^2 - 5 con x0 = 2 con una tolerancia de error de 10^-10.
f(x) = x^3 - 2*x^2 - 5
 
f(x) =
 
x^3 - 2*x^2 - 5
 
x0=2;
tol = 10^-10;
[aprox, niter,iter] = newtonEjer2JQ(f, x0, tol)
 
aprox =
 
2.6906474480286137504833133158021
 

niter =

     6

 
iter =
 
                              3.25
  2.811036789297658862876254180602
  2.697989502468529292828592350807
 2.6906771528603616282646384806492
 2.6906474485176188254142970123915
 
% f(x) = (x-2)^2 - log(x) con x0 = 2 con una toleracia de error de 10^-10.
f(x) = (x-2)^2 - log(x)
 
f(x) =
 
(x - 2)^2 - log(x)
 
x0 = 2;
tol = 10^-10;
[aprox, niter,iter] = newtonEjer2JQ(f, x0, tol)
 
aprox =
 
1.4123911720238166551651862327177
 

niter =

     6

 
iter =
 
 0.61370563888010938116553575708365
  1.1611915780142176789252241485676
  1.3794650184446199549916991960677
  1.4116970999548890016645611789127
  1.4123908523587346979050985987162
 
% Programa 3
% Corra el codigo para varios valores positivos incluyendo valores enteros como 4, 25, 91 y trate de identicar lo que la iteracion hace. 
%Elija como punto inicial valores positivos. Deje un comentario con su conclusion.

aprox = ejer3JQ(4,10)
 
aprox =
 
2.0
 
aprox = ejer3JQ(25,10)
 
aprox =
 
5.0
 
aprox = ejer3JQ(91,10)
 
aprox =
 
9.5393920141694564915262158602323
 
aprox = ejer3JQ(91,20)
 
aprox =
 
9.5393920141694564915262158602323
 
% Lo que veo que hace es aproximarte la raiz cuadrada de un numero R
% Programa 4
% f(x) = x^2 - 6 con x0 = 3, x1 = 2, 20 iteraciones y una tolerancia de 10^-5.
f(x) = x^2 - 6;
x0 = 3;
x1 = 2;
niter = 20;
tol = 10^-5;
[aprox, iter] = secanteEjer4JQ(f,x0,x1,niter,tol) 
Se detiene el loop porque se alcanzo la tolerancia
 
aprox =
 
2.4494896896479900020828993959592
 

iter =

    2.4000
    2.4545
    2.4494
    2.4495
         0
         0
         0
         0
         0
         0
         0
         0
         0
         0
         0
         0
         0
         0
         0
         0

% f(x) = -x^3 - cos(x) con x0 = -1, x1 = 0, 15 iteraciones y una tolerancia de 10^-3.
f(x) = -x^3 - cos(x);
x0 = -1;
x1 = 0;
niter = 15;
tol = 10^-3;
[aprox, iter] = secanteEjer4JQ(f,x0,x1,niter,tol)
Se detiene el loop porque se alcanzo la tolerancia
 
aprox =
 
-0.86545572616409310848011855211417
 

iter =

   -0.6851
   -1.2521
   -0.8072
   -0.8478
   -0.8665
   -0.8655
         0
         0
         0
         0
         0
         0
         0
         0
         0

diary off
