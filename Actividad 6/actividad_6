% Programa 1: Algoritmo del cociente de Rayleigh
function [autovector, autovalor] = rayleighJQ(A, x0, niter)
    
    c = size(A);
    N = c(1);
    
    I = eye(N,N);
    
    x = x0;
    
    
    for i = 1:niter                
        rq = (x'*A*x) / (x'*x);
        
        xT = (A-rq*I)\x;
        
        x = xT / max(xT);
    end
    
    autovector = x;
    autovalor = rq;
end

% Programa 2: Factorizacion QR
function [D] = qrJQ(A, niter)
    for i = 1:niter
       [Q,R] = qr(A);
       A = R*Q;
    end
    
    D = A;
end

% Programa 3: Gram Schmidt
function [Q] = gramSchmidtJQ(A)
    tam = size(A);
    % filas
    N = tam(1);
    % columnas
    M = tam(2);
    
    % defino matriz de ceros inicial Q
    Q = zeros(N,M);
    
    a1 = A(:,1);
    
    Q(:,1) = a1 / norm(a1);
        
    for i = 2:M
       v = A(:,i);
       
       for k = 1:i-1
          v = v - (Q(:,k)' * A(:,i)) * Q(:,k); 
       end
       
       Q(:,i) = v / norm(v);
    end
end


% Programa 1: Algoritmo del cociente de Rayleigh
% Matriz 1
% A = [3 -1 1; -1 6 2; 1 2 7]
A = [3 -1 1; -1 6 2; 1 2 7]

A =

     3    -1     1
    -1     6     2
     1     2     7

x0 = [1 1 1]'

x0 =

     1
     1
     1

niter = 5

niter =

     5

[autovector, autovalor] = rayleighJQ(A, x0, niter)


autovector =

    0.0427
    0.7624
    1.0000


autovalor =

    8.5674

eig(A)

ans =

    2.1387
    5.2939
    8.5674

% aproxima al tercer autovalor
% uso otro vector inicial
x0 = [-1 1 -1]'

x0 =

    -1
     1
    -1

autovector =

    1.0000
   -1.3258
    0.9681


autovalor =

    5.2939

% aproxima al segundo autovalor calculado con eig
% uso otro vector inicial
x0 = [-1,-1,-1]'

x0 =

    -1
    -1
    -1


autovector =

    0.0427
    0.7624
    1.0000


autovalor =

    8.5674

% aproxima nuevamente al tercer autovalor calculado con eig
% segunda matriz
A = [10 5 0 3; 5 10 -4 0; 0 -4 8 -1; 3 0 -1 5]

A =

    10     5     0     3
     5    10    -4     0
     0    -4     8    -1
     3     0    -1     5

x0 = [1 1 1 1]'

x0 =

     1
     1
     1
     1


autovector =

   -2.2727
    1.0000
   -2.6253
   -1.0134


autovalor =

    9.1376

eig(A)

ans =

    1.6630
    5.6991
    9.1376
   16.5003

% Aproxima al tercer autovalor de eig
% Uso otro vector inicial
x0 = [-1 1 1 1]'

x0 =

    -1
     1
     1
     1

autovector =

    1.0000
   -0.9840
   -0.8008
   -1.1390


autovalor =

    1.6630

% Aproxima al primer autovalor de eig
% Uso otro vector inicial
x0 = [1 -1 1 1]'

x0 =

     1
    -1
     1
     1


autovector =

    0.8657
   -0.3809
    1.0000
    0.3860


autovalor =

    9.1376

% Aproxima nuevamente al tercer autovalor
% Tercer matriz
A = [2 2 1; 2 2 2; 1 2 2]

A =

     2     2     1
     2     2     2
     1     2     2

x0 = [1 1 1]'

x0 =

     1
     1
     1


[autovector, autovalor] = rayleighJQ(A, x0, 2)

autovector =

    0.8431
    1.0000
    0.8431


autovalor =

    5.3723

eig(A)

ans =

   -0.3723
    1.0000
    5.3723

% Aproxima al tercer autovalor
% use menos iteraciones ya que era mas proxima a ser no singular
% Uso otro vector inicial
x0 = [-1 1 1]'

x0 =

    -1
     1
     1

[autovector, autovalor] = rayleighJQ(A, x0, 2)

autovector =

    1.0000
    0.0008
   -1.0008


autovalor =

    0.9909

% Aproxma al segundo autovalor
% Uso otro vector inicial
x0 = [1 1 -1]'

x0 =

     1
     1
    -1

[autovector, autovalor] = rayleighJQ(A, x0, 2)

autovector =

   -1.0008
    0.0008
    1.0000


autovalor =

    0.9909

% Aproxima al mismo autovalor anterior
% Programa 2: Factorizacion QR
A = [3 -1 1; -1 6 2; 1 2 7]

A =

     3    -1     1
    -1     6     2
     1     2     7

D = qrJQ(A, niter)

D =

    6.4186    1.5552   -0.0495
    1.5552    7.4418    0.0178
   -0.0495    0.0178    2.1395

D = qrJQ(A, 30)

D =

    8.5674    0.0000   -0.0000
    0.0000    5.2939   -0.0000
    0.0000   -0.0000    2.1387

% Matriz 2
A = [10 5 0 3; 5 10 -4 0; 0 -4 8 -1; 3 0 -1 5]

A =

    10     5     0     3
     5    10    -4     0
     0    -4     8    -1
     3     0    -1     5

D = qrJQ(A, 30)

D =

   16.5003    0.0000   -0.0000   -0.0000
    0.0000    9.1376   -0.0000    0.0000
   -0.0000   -0.0000    5.6991   -0.0000
    0.0000   -0.0000   -0.0000    1.6630

eig(A)

ans =

    1.6630
    5.6991
    9.1376
   16.5003

% Matriz 3
A = [2 2 1; 2 2 2; 1 2 2]

A =

     2     2     1
     2     2     2
     1     2     2

D = qrJQ(A, 30)

D =

    5.3723   -0.0000   -0.0000
   -0.0000    1.0000    0.0000
   -0.0000    0.0000   -0.3723

eig(A)

ans =

   -0.3723
    1.0000
    5.3723

% Si se encuentran todos porque la matriz resultante despues de un numero N de iteraciones va a contener los autovalores de A en su diagonal
% Programa 3 Gram Schmidt
% Matriz 1
A = [3 -1 1; 3 6 2; 3 3 7]

A =

     3    -1     1
     3     6     2
     3     3     7

Q = gramSchmidtJQ(A)

Q =

    0.5774   -0.7383   -0.3487
    0.5774    0.6712   -0.4650
    0.5774    0.0671    0.8137

[q r] = qr(A)

q =

   -0.5774    0.7383   -0.3487
   -0.5774   -0.6712   -0.4650
   -0.5774   -0.0671    0.8137


r =

   -5.1962   -4.6188   -5.7735
         0   -4.9666   -1.0738
         0         0    4.4174

Q'*A

ans =

    5.1962    4.6188    5.7735
         0    4.9666    1.0738
         0         0    4.4174

% Matriz 2
A = [10 -1 0; -1 10 -2; 0 -2 10]

A =

    10    -1     0
    -1    10    -2
     0    -2    10

Q = gramSchmidtJQ(A)

Q =

    0.9950    0.0975    0.0198
   -0.0995    0.9751    0.1980
         0   -0.1990    0.9800

[q r] = qr(A)

q =

   -0.9950   -0.0975    0.0198
    0.0995   -0.9751    0.1980
         0    0.1990    0.9800


r =

  -10.0499    1.9901   -0.1990
         0  -10.0518    3.9400
         0         0    9.4041

Q'*A

ans =

   10.0499   -1.9901    0.1990
         0   10.0518   -3.9400
         0    0.0000    9.4041

% Matriz 3
A = [4 1 1 0 1; -1 -3 1 1 0; 2 1 5 -1 -1; -1 -1 -1 4 0; 0 2 -1 1 4]

A =

     4     1     1     0     1
    -1    -3     1     1     0
     2     1     5    -1    -1
    -1    -1    -1     4     0
     0     2    -1     1     4

Q = gramSchmidtJQ(A)

Q =

    0.8528   -0.2417   -0.4326    0.1333    0.0968
   -0.2132   -0.7521    0.1553    0.0683    0.6001
    0.4264    0.0269    0.8763    0.2126   -0.0658
   -0.2132   -0.1612   -0.1331    0.8900   -0.3446
         0    0.5909   -0.0555    0.3745    0.7124

[q r] = qr(A)

q =

   -0.8528   -0.2417    0.4326   -0.1333    0.0968
    0.2132   -0.7521   -0.1553   -0.0683    0.6001
   -0.4264    0.0269   -0.8763   -0.2126   -0.0658
    0.2132   -0.1612    0.1331   -0.8900   -0.3446
         0    0.5909    0.0555   -0.3745    0.7124


r =

   -4.6904   -2.1320   -2.9848    1.4924   -0.4264
         0    3.3845   -1.2893   -0.8327    2.0951
         0         0   -4.2929    1.3089    1.5308
         0         0         0   -3.7903   -1.4187
         0         0         0         0    3.0121

Q'*A

ans =

    4.6904    2.1320    2.9848   -1.4924    0.4264
    0.0000    3.3845   -1.2893   -0.8327    2.0951
    0.0000    0.0000    4.2929   -1.3089   -1.5308
    0.0000    0.0000    0.0000    3.7903    1.4187
    0.0000   -0.0000   -0.0000   -0.0000    3.0121

% Matriz 4
A = [10 5 0 0; 5 10 -4 0; 0 -4 8 -1; 0 0 -1 5]

A =

    10     5     0     0
     5    10    -4     0
     0    -4     8    -1
     0     0    -1     5

Q = gramSchmidtJQ(A)

Q =

    0.8944   -0.3841   -0.2247   -0.0446
    0.4472    0.7682    0.4493    0.0892
         0   -0.5121    0.8425    0.1672
         0         0   -0.1947    0.9809

[q r] = qr(A)

q =

   -0.8944    0.3841    0.2247   -0.0446
   -0.4472   -0.7682   -0.4493    0.0892
         0    0.5121   -0.8425    0.1672
         0         0    0.1947    0.9809


r =

  -11.1803   -8.9443    1.7889         0
         0   -7.8102    7.1701   -0.5121
         0         0   -5.1371    1.8158
         0         0         0    4.7372

Q'*A

ans =

   11.1803    8.9443   -1.7889         0
         0    7.8102   -7.1701    0.5121
   -0.0000    0.0000    5.1371   -1.8158
   -0.0000    0.0000   -0.0000    4.7372

% Matriz 5
A = [2 -1 1; 2 2 2; -1 -1 2]

A =

     2    -1     1
     2     2     2
    -1    -1     2

Q = gramSchmidtJQ(A)

Q =

    0.6667   -0.7454    0.0000
    0.6667    0.5963    0.4472
   -0.3333   -0.2981    0.8944

[q r] = qr(A)

q =

   -0.6667    0.7454         0
   -0.6667   -0.5963    0.4472
    0.3333    0.2981    0.8944


r =

   -3.0000   -1.0000   -1.3333
         0   -2.2361    0.1491
         0         0    2.6833

Q'*A

ans =

    3.0000    1.0000    1.3333
    0.0000    2.2361   -0.1491
   -0.0000   -0.0000    2.6833

% Matriz 6
A = [2 -1 1; 2 2 2; -1 -1 2]

A =

     2    -1     1
     2     2     2
    -1    -1     2

Q = gramSchmidtJQ(A)

Q =

    0.6667   -0.7454    0.0000
    0.6667    0.5963    0.4472
   -0.3333   -0.2981    0.8944

[q r] = qr(A)

q =

   -0.6667    0.7454         0
   -0.6667   -0.5963    0.4472
    0.3333    0.2981    0.8944


r =

   -3.0000   -1.0000   -1.3333
         0   -2.2361    0.1491
         0         0    2.6833

Q'*A

ans =

    3.0000    1.0000    1.3333
    0.0000    2.2361   -0.1491
   -0.0000   -0.0000    2.6833

% Qt * A es R de la factorizacion QR. Esto es debido a que
% Si A = Q*R entonces Qt*A = Qt*Q*R 
% Como Q es ortonormal entonces inv(Q) = Qt
% Entonces Qt * Q = I
% Por lo tanto Qt*A = Qt*Q*R = R
% En algunos casos se logra la igualdad exacta en Qt*A = R, debido a que varia el signo del Q calculado por la funcion de matlab
% y el calculado por el algoritmo propio. No supe bien la causa aunque imagine que fue por un tema de determinantes
diary off
